if (typeof SwimGame == "undefined") {
    SwimGame = {}
} (function(a) {
    a.encodeHtml = function(c) {
        return c && c.replace ? (c.replace(/&/g, "&amp;").replace(/ /g, "&nbsp;").replace(/\b&nbsp;+/g, " ").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\\/g, "&#92;").replace(/\'/g, "&#39;").replace(/\"/g, "&quot;").replace(/\n/g, "<br/>").replace(/\r/g, "")) : c
    };
    a.encodeUrl = function(c) {
        return typeof c === "undefined" ? "": encodeURIComponent(c)
    };
    a.decodeHtml = function(c) {
        return c && c.replace ? (c.replace(/&nbsp;/gi, " ").replace(/&lt;/gi, "<").replace(/&gt;/g, ">").replace(/&#92;/gi, "\\").replace(/&#39;/gi, "'").replace(/&quot;/gi, '"').replace(/\<br\/\>/gi, "\n").replace(/&amp;/gi, "&")) : c
    };
    a.decodeUrl = function(c) {
        return typeof c === "undefined" ? "": decodeURIComponent(c)
    };
    //Jan
    (function() {
        var e = null;
        _lastWrap = null,
        _stop = function(f) {
            if (f) {
                if (f.data("_guide")) {
                    f.data("_guide").remove();
                    f.removeData("_guide")
                }
            } else {
                if (e) {
                    e.remove();
                    e = null;
                    _lastWrap && _lastWrap.removeData("_guide")
                }
            }
        };
        var d = function(j, l, m) {
            var g = $('<div class="ball-scale-multiple"><div></div><div></div><div></div></div>');
            if (j.css("position") === "static") {
                j.css("position", "relative")
            }
            if (typeof l === "object" && typeof l.x !== "undefined" && typeof l.y !== "undefined" && typeof l.w !== "undefined" && typeof l.h !== "undefined") {
                var k = Math.min(l.w, l.h) * (m || 1);
                g.children().css({
                    width: k,
                    height: k
                });
                g.css({
                    left: l.x + (l.w - k) / 2,
                    top: l.y + (l.h - k) / 2
                })
            } else {
                m = m || 0.8;
                var f = j.outerHeight();
                var h = j.outerWidth();
                var i = (l === "w" ? h / 2 : (l === "h" ? f / 2 : (l === "min" ? Math.min(f, h) / 2 : Math.max(f, h) / 2))) * m;
                g.css({
                    left: h / 2 - i,
                    top: f / 2 - i
                });
                g.children().css({
                    width: 2 * i,
                    height: 2 * i
                })
            }
            j.append(g);
            e = g;
            j.data("_guide", g);
            _lastWrap = j
        };
        var c = {
            play: d,
            stop: _stop
        };
        a.Guide = c
    })();
    //Jan
    a.initEdit = function(d) {
        var n = d.origin,
        j = d.originDef,
        q = d.originMod,
        c = {}; (function() {
            if (!q) {
                return
            }
            $.each(q,
            function(r, t) {
                var u = n[r];
                if (t.css) {
                    function s(v) {
                        if (typeof v.opt !== "undefined") {
                            v.opt = 0
                        }
                        if (v.tra !== "undefined") {
                            v.defTra = v.tra
                        }
                        v.defVal = v.val
                    }
                    $.each(t.css,
                    function(v, w) {
                        if (w.css) {
                            $.each(w.css,
                            function(x, y) {
                                s(y)
                            })
                        } else {
                            s(w)
                        }
                    });
                    if (g_config.isNewGame) {
                        $.extend(true, u.css, t.css)
                    }
                }
                if (t.text) {
                    $.each(t.text,
                    function(v, w) {
                        if (g_config.isNewGame) {
                            if (w.type == 2) {
                                w.txtopt = 0
                            }
                            $.extend(true, u.text, t.text)
                        }
                    })
                }
            });
            $.extend(true, j, q)
        })();
        function p(s, y) {
            var z = "getImgInfo-" + s;
            if (y) {
                z = "getImgInfo-rem-" + s
            }
            var v = c[z];
            if (v) {
                return v
            }
            var u = h(s)[0];
            if (!u) {
                return
            }
            v = {
                name: s,
                css: u.css
            };
            if (u.path) {
                if (a.getType(u.path[0]) === "array") {
                    v.path = [];
                    for (var r = 0; r < u.path.length; r++) {
                        v.path[r] = a.getSrc(u.path[r][0])
                    }
                } else {
                    v.path = a.getSrc(u.path[0])
                }
            }
            var w = y ? parseFloat: parseRemToPx;
            var A = {
                size: ["width", "height"],
                pos: ["left", "top"]
            };
            for (var z in A) {
                var x = A[z];
                var t = u[z];
                if (!t) {
                    continue
                }
                if (a.getType(t) === "array") {
                    v[x[0]] = [],
                    v[x[1]] = [];
                    $.each(t,
                    function(B, C) {
                        v[x[0]].push(w(C[x[0]]));
                        v[x[1]].push(w(C[x[1]]))
                    })
                } else {
                    v[x[0]] = w(t[x[0]]);
                    v[x[1]] = w(t[x[1]])
                }
            }
            c[z] = v;
            return v
        }
        function k(v, s, r) {
            var u = r ? s.defVal: s.val;
            var t = r ? s.defTra: s.tra;
            if (s.from) {
                v = $(s.from)
            }
            if (s.type !== "color") {
                v.css(s.name, u)
            } else {
                if (s.name === "text-shadow") {
                    v.css(s.name, g(i(u, t)))
                } else {
                    v.css(s.name, i(u, t))
                }
            }
        }
        function g(r) {
            return r + " -1px -1px 0px, " + r + " 0px -1px 0px, " + r + " 1px -1px 0px, " + r + " 1px 0px 0px, " + r + " 1px 1px 0px, " + r + " 0px 1px 0px, " + r + " -1px 1px 0px, " + r + " -1px 0px 0px"
        }
        function i(s, r) {
            if (typeof r === "undefined") {
                return s
            }
            return "rgba" + s.substring(s.indexOf("("), s.indexOf(")")) + "," + (r ? r: 0) + ")"
        }
        function h(s) {
            for (var t = 0; t < n.length; t++) {
                var r = n[t];
                if (r.name === s) {
                    return [r, j[t]]
                }
            }
            return [false, false]
        }
        function f(t, s) {
            var r = {};
            r.from = t;
            r.title = s[1];
            r.limit = s[2];
            r.defSrc = a.getSrc(s[0]);
            return r
        }
        function o(r, s) {
            r.each(function() {
                if (/img/i.test($(this)[0].nodeName)) {
                    $(this).attr("src", s)
                } else {
                    $(this).css("background-image", 'url("' + s + '")')
                }
            })
        }
        function m(s, r) {
            a.getType(r) === "undefined" && (r = 0);
            return a.getType(s) === "array" ? (s[r] || s[0]) : s
        }
        function l(O) {
            var N = typeof O === "object" ? O: h(O),
            v = N[0],
            F = N[1],
            O = v.name,
            x = $(".editTarget-" + O),
            w = v.pos,
            C = v.size,
            D = v.path,
            s = F.size,
            u = F.pos;
            x = x.not(function() {
                return $(this).data("hasBindEdit")
            });
            var E = (a.getType(u) === "array" && a.getType(s) !== "array");
            x.each(function(U) {
                var S = m(w, U),
                R = m(C, U),
                Q = m(s, U),
                T = m(u, U);
                if (R) {
                    $(this).addClass("slaveImg");
                    if (!$(this).parent().hasClass("imgContainer")) {
                        $(this).wrap('<div class="imgContainer absCenter"></div>')
                    }
                    if (!Q.disable) {
                        if (E) {
                            var P = null;
                            $(this).addResizableFn("start",
                            function(W, X) {
                                P = x.not(this);
                                if (/n|w/.test(X.axis)) {
                                    P.each(function(Z, ab) {
                                        var Y = $(this),
                                        aa = Y.parents(".ui-wrapper");
                                        Y.data("originalPosition-relative", {
                                            left: parseFloat(aa.css("left")) - X.originalPosition.left,
                                            top: parseFloat(aa.css("top")) - X.originalPosition.top,
                                        })
                                    })
                                }
                            });
                            $(this).addResizableFn("resize",
                            function(X, Z) {
                                var W = /n|w/.test(Z.axis),
                                Y;
                                P.each(function(ab, ad) {
                                    var aa = $(this),
                                    ac = aa.parents(".ui-wrapper");
                                    aa.add(ac).css({
                                        width: Z.size.width,
                                        height: Z.size.height
                                    });
                                    if (W) {
                                        Y = aa.data("originalPosition-relative");
                                        aa.add(ac).css({
                                            left: Z.position.left + Y.left,
                                            top: Z.position.top + Y.top
                                        })
                                    }
                                })
                            });
                            $(this).addResizableFn("stop",
                            function(W, X) {
                                P.each(function(Y, Z) {
                                    $(this).removeData("originalPosition-relative").attr("resize", "1")
                                });
                                P = null
                            })
                        }
                        var V = {
                            width: Q.width,
                            height: Q.height
                        };
                        if (T && T.disable) {
                            V.left = T.left;
                            V.top = T.top
                        }
                        a.moduleSlaveImgResize($(this), V);
                        if (E) {
                            $(this).addResizableFn("recover",
                            function() {
                                var W = $(this).parents(".ui-wrapper");
                                x.each(function(X, Y) {
                                    if (X === U) {
                                        return
                                    }
                                    var aa = $(Y).add($(Y).parents(".ui-wrapper"));
                                    aa.width(W.width()).height(W.height());
                                    var Z = m(u, X);
                                    if (Z && Z.disable) {
                                        aa.css({
                                            left: Z.left,
                                            top: Z.top
                                        })
                                    }
                                    aa.attr("resize", 0)
                                })
                            })
                        }
                    }
                }
                if (S && !T.disable) {
                    a.moduleDraggale($(this), T.forParent == "false" ? false: true)
                }
            });
            var z = -2,
            M = null,
            t = false,
            K = null;
            if (F.edit) {
                if (typeof F.edit === "number") {
                    z = F.edit
                } else {
                    if (F.edit === "_background") { ! d.bgList && (d.bgList = []);
                        d.bgList.push({
                            from: ".editTarget-" + O + ",.editRelate-" + O,
                            defSrc: a.getSrc(D[0])
                        });
                        x.data("hasBindEdit", true);
                        return
                    } else {
                        if (F.edit !== "_none") {
                            M = [];
                            if (c[F.edit]) {
                                M = c[F.edit]
                            } else {
                                var B = [];
                                if (F.edit === "all") {
                                    B = d.originDef
                                } else {
                                    $.each(F.edit.split(","),
                                    function(P, Q) {
                                        B.push(h(Q)[1])
                                    })
                                }
                                for (var L = 0; L < B.length; L++) {
                                    var A = B[L].path;
                                    var G = B[L].name;
                                    var r = ".editTarget-" + G + ",.editRelate-" + G;
                                    if (typeof A != "undefined") {
                                        if (a.getType(A[0]) === "array") {
                                            for (var H = 0; H < A.length; H++) {
                                                H > 0 && (r = ".editTarget-" + G + "-" + H + ",.editRelate-" + G + "-" + H);
                                                M.push(f(r, A[H]))
                                            }
                                        } else {
                                            M.push(f(r, A))
                                        }
                                    }
                                } ! c[F.edit] && (c[F.edit] = M)
                            }
                            z = -1
                        }
                    }
                }
            }
            if (F.css) {
                t = !F.css[0].target ? true: F.css[0].target;
                K = $.extend(true, [], F.css, v.css);
                F.crrCssArg = K
            }
            var y = "editTarget-" + O,
            J = null,
            I = false;
            if (F.text) {
                $.each(v.text,
                function(P, Q) {
                    if (Q.type == 2) {
                        z = 0;
                        y = function() {
                            EditWrite(v.text, O, F.text)
                        }
                    }
                })
            }
            if (F.edit || F.css) {
                a.initModuleLayer(x, z, y, M, t, K)
            }
            x.data("hasBindEdit", true)
        }
        if (_manage) {
            d.setAllEdit = function() {
                e();
                $.each(n,
                function(s, r) {
                    l([r, j[s]])
                })
            }
        } else {
            e()
        }
        function e() {
            $.each(n,
            function(u, s) {
                var v = j[u],
                t = $(".editTarget-" + s.name),
                w = s.pos,
                z = s.size,
                y = s.path;
                var r = function(A) {
                    A.each(function(D) {
                        var C = m(w, D),
                        B = m(z, D);
                        if (C && C.top && C.left) {
                            $(this).css({
                                top: C.top,
                                left: C.left
                            }).addClass("abs")
                        }
                        if (B && B.width && B.height) {
                            $(this).css({
                                width: B.width,
                                height: B.height
                            })
                        }
                    })
                };
                r(t);
                if (y) {
                    var x = ".editRelate-" + s.name;
                    if (a.getType(y[0]) === "array") {
                        $.each(y,
                        function(B, D) {
                            var C = a.getSrc(D[0]);
                            var A = "editTarget-" + s.name;
                            if (B !== 0) {
                                A = "editTarget-" + s.name + "-" + B;
                                x = ".editRelate-" + s.name + "-" + B
                            }
                            if ($("." + A).length > 0) {
                                o($("." + A), C);
                                r($("." + A))
                            } else {
                                $("body").append('<input class="' + A + '" type="hidden" value="' + C + '">')
                            }
                            if ($(x).length > 0) {
                                o($(x), C)
                            }
                        })
                    } else {
                        o(t.add(x), a.getSrc(y[0]))
                    }
                }
                if (s.css) {
                    $.extend(true, v.css, s.css);
                    $.each(v.css,
                    function(A, B) {
                        if (!B.from) {
                            B.from = ".editTarget-" + s.name + ",.editRelate-" + s.name
                        }
                        if (B.css) {
                            $.each(B.css,
                            function(D, C) {
                                if (!C.from) {
                                    C.from = B.from
                                }
                                k($(C.from), C, C.opt === 0)
                            })
                        } else {
                            k($(B.from), B, B.opt === 0)
                        }
                    })
                }
                if (s.text) {
                    $.each(s.text,
                    function(A, B) {
                        if (B.type == 2) {
                            var C = Fai.encodeHtml(B.txtopt ? B.val: v.text[A].val);
                            $(".editTarget-" + s.name + ",.editRelate-" + s.name).html(C)
                        } else {
                            $(".editTarget-" + s.name).val(B.value)
                        }
                    })
                }
            })
        }
        d.getImgInfo = p;
        d.getRgba = i;
        delete d.originMod;
        return d
    };
    //Jan
    a.initSound = function(d, e) {
        var c = {};
        var f = LF.sound.webAudioEnabled && LF.global.webAudio;
        $(function() {
            $.setSoundM()
        });
        return {
            list: d,
            listDef: e,
            allowPlay: true,
            setPlayPower: function(h, i) {
                if (typeof h == "boolean") {
                    this.allowPlay = h
                }
                var g = c[h];
                if (!g) {
                    a.tlog("Sound_play_err", "这个key:" + h + " 不存在!");
                    return this
                }
                g._allowPlay = i
            },
            play: function(j, k, i) {
                if (_manage) {
                    return
                }
                if (!this.allowPlay) {
                    return this
                }
                if (d && a.getType(j) === "number") {
                    var h = j === 0 ? 1 : 3;
                    if (d[j].optFlag === h) {
                        return this
                    }
                }
                if (j !== 0 && d && d[0].optFlag !== 1 && !f) {
                    return this
                }
                var g = c[j];
                if (!g) {
                    a.tlog("Sound_play_err", "这个key:" + j + " 不存在!");
                    return this
                }
                if (!g._allowPlay) {
                    return
                }
                g.play(k, i);
                return this
            },
            readyPlay: function(i, j, g) {
                if (_manage) {
                    return
                }
                var h = this;
                h.onReady(i,
                function() {
                    h.play(i, j, g)
                })
            },
            pause: function(h) {
                if (_manage) {
                    return
                }
                var g = c[h];
                if (!g) {
                    a.tlog("Sound_pause_err", "这个key:" + h + " 不存在!");
                    return this
                }
                g.stop();
                return this
            },
            pauseAll: function() {
                if (_manage) {
                    return
                }
                var g = null;
                for (var h in c) {
                    g = c[h];
                    if (g) {
                        g.stop()
                    }
                }
                return this
            },
            load: function(l, h, i) {
                if (_manage) {
                    return
                }
                if (c[h]) {
                    a.tlog("Sound_load_err", "这个key:" + h + " 已经存在!");
                    return this
                }
                var g = null,
                k = f;
                typeof i !== "undefined" && (k = i);
                if (k) {
                    g = new LF.webAudio()
                } else {
                    g = new LF.media();
                    try {
                        g.data = new Audio()
                    } catch(j) {
                        console.warn("ReferenceError: Can't find variable: Audio");
                        g.data = {}
                    }
                    g.data.loop = false;
                    g.data.autoplay = false
                }
                g._type = "audio";
                if (l) {
                    g.load(l)
                }
                g.readyCallBack = $.Callbacks("unique memory");
                g.addEventListener(LF.event.COMPLETE,
                function(m) {
                    g.complete = true;
                    g.readyCallBack.fire(g);
                    g.readyCallBack = null
                });
                g._allowPlay = true;
                c[h] = g;
                return this
            },
            onReady: function(h, i) {
                if (_manage) {
                    return
                }
                var g = c[h];
                if (!g) {
                    a.tlog("Sound_onReady_err", "这个key:" + h + " 不存在!");
                    return this
                }
                if (g.complete) {
                    i(g)
                } else {
                    g.readyCallBack.add(i)
                }
                return this
            },
            cache: c,
        }
    };
    //Jan
    a.initCallBack = function(d, c) {
        d = d || {};
        var e = {};
        d.addCallBack = function(f) {
            if (a.getType(f) == "array") {
                for (var g = f.length - 1; g >= 0; g--) {
                    arguments.callee(f[g])
                }
                return
            }
            if (typeof f == "string" && typeof e[f] == "undefined") {
                e[f] = null
            }
        };
        d.on = function(f, h) {
            var g = e[f];
            if (typeof g === "undefined") {
                return this
            }
            if (g === null) {
                e[f] = g = $.Callbacks("unique memory stopOnFalse")
            }
            g.add(h);
            return this
        };
        d.off = function(f, i) {
            var h = this;
            if (typeof f === "undefined") {
                $.each(e,
                function(j, k) {
                    h.off(k, i)
                });
                return h
            }
            var g = e[f];
            if (!g) {
                return h
            }
            if (typeof i === "undefined") {
                g.empty()
            } else {
                g.remove(i)
            }
            return h
        };
        d.fire = function(g) {
            var f = e[g];
            if (f) {
                var h = Array.prototype.slice.call(arguments);
                h.shift();
                return f.fire.apply(f, h)
            }
            return true
        };
        d.fireWith = function(g) {
            var f = e[g];
            if (f) {
                var h = Array.prototype.slice.call(arguments);
                h.shift();
                return f.fireWith.apply(f, h)
            }
            return true
        };
        if (typeof c !== "undefined") {
            d.addCallBack(c)
        }
        return d
    };
    //Jan
    a.initTime = function(c) {
        var g = null,
        e, h = 0;
        function d(i) {
            var j = Math.round(i * 100) / 100;
            var k = j.toString();
            var l = k.indexOf(".");
            if (l < 0) {
                l = k.length;
                k += "."
            }
            while (k.length <= l + 2) {
                k += "0"
            }
            return k
        }
        var f = {
            val: 0,
            pastTime: 0,
            interval: 140,
            range: [100, 180],
            target: null,
            isDesc: !g_config.countsTimeType,
            acceList: null,
            initTime: c,
            status: "ended",
            updateFlag: true,
            targetFlag: true,
            frameInc: 0,
            setAcceList: function(k) {
                if (typeof k === "number") {
                    var l = k;
                    k = [];
                    for (var j = 0; j < l; j++) {
                        k.push((l - j) * (this.initTime / (l + 1)))
                    }
                }
                this.acceList = k
            },
            setTarget: function() {
                var i = d(this.val);
                this.targetFlag && this.target.text(i);
                this.fireWith("setTime", this, [i])
            },
            init: function() {
                if (this.initTime === 99999) {
                    return
                } ! this.target && (this.target = $(".time"));
                this.val = this.initTime;
                this.pastTime = 0;
                $(".timeUpImg").hide();
                this.setTarget();
                return this
            },
            start: function() {
                if (this.initTime === 99999) {
                    return
                }
                e = new Date().getTime() / 1000;
                if (this.updateFlag && this.status === "ended") {
                    this.status = "runing";
                    this.play()
                } else {
                    this.status = "runing"
                }
                return this
            },
            isRunning: function() {
                return this.status === "runing"
            },
            pause: function() {
                this.status = "pause"
            },
            end: function() {
                if (this.status === "ended") {
                    return
                }
                clearTimeout(g);
                h = 0;
                this.update();
                this.status = "ended";
                return this
            },
            setTime: function() {
                var j = (new Date).getTime() / 1000;
                var n = j - e;
                var l = this.isDesc ? -1 : 1;
                if (n < this.range[0] / 1000) {
                    n = this.range[0] / 1000
                } else {
                    if (n > this.range[1] / 1000) {
                        n = this.range[1] / 1000
                    }
                }
                this.val += l * n;
                this.pastTime = l * (this.val - this.initTime);
                e = j;
                if (this.isDesc) {
                    if (this.acceList) {
                        for (var k = 0; k < this.acceList.length; k++) {
                            if (this.val <= this.acceList[k] && h == k) {
                                h++;
                                this.fireWith("acce", this, [h]);
                                break
                            }
                        }
                    }
                    if (this.val <= 0) {
                        this.val = 0;
                        this.setTarget();
                        clearTimeout(g);
                        h = 0;
                        this.status = "ended";
                        this.fireWith("end", this);
                        var m = $(".timeUpImg");
                        m.removeClass("tada");
                        m.addClass("tada");
                        m.show();
                        return
                    }
                }
                this.setTarget()
            },
            update: function() {
                if (this.initTime === 99999) {
                    return
                }
                if (this.status !== "pause") {
                    this.setTime()
                }
                this.fireWith("timer", this, [this.status !== "pause"])
            },
            play: function() {
                this.update();
                if (this.status !== "ended") {
                    g = setTimeout(arguments.callee.bind(this), this.interval)
                }
            },
            updateInFrame: function(i) {
                if (this.initTime === 99999) {
                    return
                }
                if (this.status === "ended") {
                    return
                }
                this.frameInc += i;
                if (this.frameInc >= this.interval) {
                    this.update();
                    this.frameInc = 0
                }
            }
        };
        a.initCallBack(f, ["end", "timer", "acce", "setTime"]);
        f.init();
        f.changeTwoDecimal_f = d;
        return f
    };
    //Jan
    a.initGrade = function() {
        var c = function(d) {
            c.set(c.val + d)
        };
        $.extend(c, {
            val: 0,
            set: function(d) {
                c.val = d;
                c.val < 0 && (c.val = 0);
                c.fireWith("setGrade", c, [c.val]);
                c.target && c.target.text(c.val)
            }
        });
        $(function() {
            c.target = $("#grade")
        });
        a.initCallBack(c, ["setGrade"]);
        return c
    };
    //Jan
    a.getSrc = function(c) {
        return c.replace("*_resRoot*", _resRoot)
    };
    a.refresh = function() {
        window.location.href = document.URL
    };
    //检查是否是手机打开 boolean
    a.isIPhone = function() {
        return window.navigator.userAgent.indexOf("iPhone") !== -1
    };
    //检查是否是PC端打开 boolean
    a.IsPC = function() {
        var c = navigator.userAgent;
        var f = ["Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod"];
        var d = true;
        for (var e = 0; e < f.length; e++) {
            if (c.indexOf(f[e]) > 0) {
                d = false;
                break
            }
        }
        return d
    };
    a.getType = function(c) {
        return Object.prototype.toString.call(c).match(/\[object\s(\w+)]/)[1].toLowerCase()
    }
})(SwimGame);